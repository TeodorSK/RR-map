[{"C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\MapContainer.js":"1","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\App.js":"2","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\NewMovementInput.js":"3","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\MovementsList.js":"4","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\index.js":"5","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\CityPin.js":"6","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\RouteList.js":"7","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\TabMenu.js":"8","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\EditMovement.js":"9","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\MovementSummary.js":"10"},{"size":16503,"mtime":1611522764706,"results":"11","hashOfConfig":"12"},{"size":192,"mtime":1611347417367,"results":"13","hashOfConfig":"12"},{"size":3159,"mtime":1611348152275,"results":"14","hashOfConfig":"12"},{"size":2296,"mtime":1611434122240,"results":"15","hashOfConfig":"12"},{"size":248,"mtime":1611426413973,"results":"16","hashOfConfig":"12"},{"size":868,"mtime":1611029231640,"results":"17","hashOfConfig":"12"},{"size":1843,"mtime":1611509155098,"results":"18","hashOfConfig":"12"},{"size":741,"mtime":1611337814176,"results":"19","hashOfConfig":"12"},{"size":11449,"mtime":1611454528303,"results":"20","hashOfConfig":"12"},{"size":5149,"mtime":1611508963381,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1pl14ye",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},"C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\MapContainer.js",["49","50","51","52","53","54","55","56","57","58","59"],"C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\App.js",[],["60","61"],"C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\NewMovementInput.js",["62"],"import React, { useEffect, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { GithubPicker } from 'react-color';\r\n\r\n\r\n\r\nfunction NewMovementInput(props) {\r\n\r\n    const [slat, setSLat] = useState(0);\r\n    const [slng, setSLng] = useState(0);\r\n    const [elat, setELat] = useState(0);\r\n    const [elng, setELng] = useState(0);\r\n    const [description, setDesc] = useState(\"\");\r\n    const [title, setTitle] = useState(\"\")\r\n    const [color, setColor] = useState('#008800')\r\n\r\n    // const [inputFields, setInputFields] = useState({\r\n    //     slat: 0,\r\n    //     slng: 0,\r\n    //     elat: 0,\r\n    //     elng: 0,\r\n    //     title: \"\",\r\n    //     description: \"\"\r\n    // })\r\n\r\n\r\n    // Toggles state of picking Lng Lat inputs with mouseclick\r\n    const [pickLngLat, setPickLngLat] = useState({\r\n        start: false,\r\n        end: false\r\n    })\r\n\r\n    const addMovement = (e) => {\r\n        e.preventDefault()\r\n        console.log(`received lnglat: ${slng} ${slat}`)\r\n        props.addMovement(parseFloat(slat), parseFloat(slng), parseFloat(elat), parseFloat(elng), title, description, color)\r\n        resetFields()\r\n    }\r\n\r\n    const resetFields = () => {\r\n        setSLat(0)\r\n        setSLng(0)\r\n        setELat(0)\r\n        setELng(0)\r\n        setTitle(\"\")\r\n        setDesc(\"\")\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!props.lastClickLngLat) return;\r\n        const { lng, lat } = props.lastClickLngLat;\r\n\r\n        if (pickLngLat.start) {\r\n            setSLat(lat)\r\n            setSLng(lng)\r\n            setPickLngLat({ start: false, end: true })\r\n        }\r\n        if (pickLngLat.end) {\r\n            setELat(lat)\r\n            setELng(lng)\r\n            setPickLngLat({ end: false })\r\n        }\r\n    }, [props.lastClickLngLat])\r\n\r\n    return (\r\n        <div style={{ backgroundColor: color }}>\r\n            <TextField onChange={(e) => setSLat(e.target.value)} value={slat} label=\"Start Lat\" variant=\"outlined\" />\r\n            <TextField onChange={(e) => setSLng(e.target.value)} value={slng} label=\"Start Lng\" variant=\"outlined\" />\r\n            <Button onClick={() => { setPickLngLat({ start: true }) }}>pick</Button>\r\n            <br />\r\n            <TextField onChange={(e) => setELat(e.target.value)} value={elat} label=\"End Lat\" variant=\"outlined\" />\r\n            <TextField onChange={(e) => setELng(e.target.value)} value={elng} label=\"End Lng\" variant=\"outlined\" />\r\n            <br />\r\n            <TextField onChange={(e) => setDesc(e.target.value)} value={description} label=\"Description\" variant=\"outlined\" />\r\n            <br />\r\n            <TextField onChange={(e) => setTitle(e.target.value)} value={title} label=\"Title\" variant=\"outlined\" />\r\n            <br />\r\n            <GithubPicker color={color} onChangeComplete={(color) => setColor(color.hex)} />\r\n            <br />\r\n            <Button onClick={addMovement}>Add movement</Button>\r\n            <Button onClick={props.computeRoute}>Compute Route</Button>\r\n            <Button onClick={props.renderLines}>Render Movements</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NewMovementInput;",["63","64"],"C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\MovementsList.js",["65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80"],"import React, { useState } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { IconButton, Typography } from '@material-ui/core';\r\nimport ArrowRightAltIcon from '@material-ui/icons/ArrowRightAlt';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport MovementSummary from './MovementSummary';\r\n\r\n\r\nfunction MovementsList(props) {\r\n\r\n    // const [openDialog, setOpenDialog] = React.useState(false);\r\n\r\n    // const [slat, setSLat] = useState(0);\r\n    // const [slng, setSLng] = useState(0);\r\n    // const [elat, setELat] = useState(0);\r\n    // const [elng, setELng] = useState(0);\r\n    // const [description, setDescription] = useState(\"\")\r\n    // const [id, setID] = useState(null)\r\n\r\n    // const handleOpenDialog = (line) => {\r\n    //     setSLng(line.coordinates[0][0])\r\n    //     setSLat(line.coordinates[0][1])\r\n    //     setELng(line.coordinates[1][0])\r\n    //     setELat(line.coordinates[1][1])\r\n    //     setDescription(line.description)\r\n    //     setID(line.id)\r\n    //     setOpenDialog(true);\r\n    // };\r\n\r\n    // const handleCloseDialog = () => {\r\n    //     setOpenDialog(false);\r\n    // };\r\n\r\n    // const handleSave = () => {\r\n\r\n    //     props.editMovement(parseFloat(slat), parseFloat(slng), parseFloat(elat), parseFloat(elng), description, id)\r\n    //     handleCloseDialog();\r\n    // }\r\n\r\n    // refactored \r\n    const getLineDetails = (line, i) => {\r\n        return (\r\n            <MovementSummary line={line} index={i} deleteMovement={props.deleteMovement} editMovement={props.editMovement} renderLines={props.renderLines} />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {props.movements.map((line, i) => getLineDetails(line, i))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MovementsList;","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\index.js",[],"C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\CityPin.js",[],"C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\RouteList.js",["81","82"],"import React, { useEffect } from 'react';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport CallMadeIcon from '@material-ui/icons/CallMade';\r\nimport CallReceivedIcon from '@material-ui/icons/CallReceived';\r\nimport { Box, Card, Grid, Typography } from '@material-ui/core';\r\n\r\n\r\nfunction RouteList(props) {\r\n\r\n    const renderRoute = props.route ? props.route.map((node, i) => (\r\n        <Box m={2} key={i}>\r\n            <Grid container >\r\n                <Grid container item alignItems=\"baseline\">\r\n                    <Grid item xs={3}>\r\n                        {node.type === \"start\" ? <CallMadeIcon fontSize=\"large\" style={{ color: '#F78914' }} /> : <CallReceivedIcon fontSize=\"large\" style={{ color: '#92CD28' }} />}\r\n                    </Grid>\r\n                    <Grid item >\r\n                        <Typography align=\"left\" variant=\"h6\" >{node.type === \"start\" ? \"Pickup: \" : \"Dropoff: \"}</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n\r\n                        <Typography align=\"left\" variant=\"h6\" >{node.title || `Movement #${i}`}</Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={3}>\r\n                        <Typography align=\"left\" variant=\"subtitle2\">\r\n                            {`(${node.coordinates[0]},${node.coordinates[1]})`}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                {(i !== props.route.length - 1) && <Grid container item>\r\n                    <Grid item xs={3}>\r\n                        <MoreVertIcon fontSize=\"large\" style={{ color: '#ADADAD' }} />\r\n                    </Grid>\r\n                </Grid>}\r\n\r\n\r\n            </Grid>\r\n        </Box>\r\n    )) : null\r\n\r\n    return (\r\n        <div>\r\n            {renderRoute}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RouteList;","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\TabMenu.js",[],"C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\EditMovement.js",["83","84","85","86","87","88","89","90","91"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ColorizeIcon from '@material-ui/icons/Colorize';\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport ColorLensIcon from '@material-ui/icons/ColorLens';\r\nimport SubjectIcon from '@material-ui/icons/Subject';\r\nimport { Box, Button, Card, Divider, Grid, IconButton, Popover, TextField, Tooltip, Typography } from '@material-ui/core';\r\nimport { GithubPicker } from 'react-color';\r\n\r\nfunction EditMovement(props) {\r\n\r\n    const saveBtn = useRef(null)\r\n    const [inputFields, setInputFields] = useState({\r\n        slat: undefined,\r\n        slng: undefined,\r\n        elat: undefined,\r\n        elng: undefined,\r\n        title: \"\",\r\n        description: \"\",\r\n        color: \"#303f9f\",\r\n        id: 0\r\n    })\r\n\r\n    const [error, setError] = useState({\r\n        slng: false,\r\n        slat: false,\r\n        elng: false,\r\n        elat: false\r\n    })\r\n\r\n    //0 || props.movement.slat\r\n    const { slat, slng, elat, elng, title, description, color } = inputFields;\r\n\r\n    // Fill edit fields\r\n    useEffect(() => {\r\n        if (props.movement) {\r\n            const { id, coordinates, title, description, color } = props.movement\r\n\r\n            setInputFields({\r\n                slat: coordinates[0][1],\r\n                slng: coordinates[0][0],\r\n                elat: coordinates[1][1],\r\n                elng: coordinates[1][0],\r\n                title,\r\n                description,\r\n                color,\r\n                id\r\n            })\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    const [popoverAnchor, setPopoverAnchor] = useState(null);\r\n    const isPopoverOpen = Boolean(popoverAnchor);\r\n    const openPopover = (event) => {\r\n        setPopoverAnchor(event.currentTarget);\r\n    };\r\n    const closePopover = () => {\r\n        setPopoverAnchor(null);\r\n    };\r\n\r\n    const [pickLngLat, setPickLngLat] = useState({\r\n        start: false,\r\n        end: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (!props.lastClickLngLat) return;\r\n        const { lng, lat } = props.lastClickLngLat;\r\n\r\n        if (pickLngLat.start) {\r\n            setInputFields({ ...inputFields, slat: lat, slng: lng })\r\n            props.drawControl.current.draw.delete(['start', 'end'])\r\n            setTimeout(() => {\r\n                props.drawControl.current.draw.add({\r\n                    type: 'Feature',\r\n                    properties: { color: color }, //Description needs to be in properties sub-object ONLY for adding to map\r\n                    id: 'start',\r\n                    geometry: { type: 'Point', coordinates: [lng, lat] }\r\n\r\n                })\r\n\r\n            }, 1)\r\n            setPickLngLat({ start: false, end: true })\r\n        }\r\n        if (pickLngLat.end) {\r\n            setInputFields({ ...inputFields, elat: lat, elng: lng })\r\n            props.drawControl.current.draw.add({\r\n                type: 'Feature',\r\n                properties: { color: color }, //Description needs to be in properties sub-object ONLY for adding to map\r\n                id: 'end',\r\n                geometry: { type: 'Point', coordinates: [lng, lat] }\r\n\r\n            })\r\n            setPickLngLat({ end: false })\r\n        }\r\n    }, [props.lastClickLngLat])\r\n    // Scroll to botton (saveBtn) on render\r\n    useEffect(() => { saveBtn.current?.scrollIntoView(); }, [pickLngLat])\r\n    const save = () => {\r\n\r\n        // Non-zero validation\r\n        if ([slng, slat, elng, elat].includes(undefined)) {\r\n            setError({\r\n                slng: !slng,\r\n                slat: !slat,\r\n                elng: !elng,\r\n                elat: !elat\r\n            })\r\n        }\r\n        else {\r\n            props.setInputOpen(false)\r\n            props.save(inputFields)\r\n            props.renderLines()\r\n            resetFields()\r\n        }\r\n    }\r\n\r\n    const resetFields = () => {\r\n        setInputFields({\r\n            slat: 0,\r\n            slng: 0,\r\n            elat: 0,\r\n            elng: 0,\r\n            title: \"\",\r\n            description: \"\",\r\n            color: \"#303f9f\"\r\n        })\r\n    }\r\n\r\n    const cancel = () => {\r\n        props.setInputOpen(false)\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <Box m={2}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <TextField size=\"medium\" fullWidth autoFocus label=\"Title\" placeholder=\"Add Title\" value={title} onChange={(e) => setInputFields({ ...inputFields, title: e.target.value })} />\r\n                    </Grid>\r\n                    <Grid container item justify=\"space-between\" alignItems=\"center\">\r\n                        <Grid inputMode>\r\n                            <Typography variant=\"body\" align=\"left\">Location</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            {/* <Button onClick={() => { setPickLngLat({ start: true }) }} variant=\"contained\" color=\"primary\" startIcon={<ColorizeIcon />} >Pick location</Button> */}\r\n                            {/* <IconButton variant=\"contained\" color=\"primary\" onClick={() => { setPickLngLat({ start: true }) }}>\r\n                                <Tooltip title=\"Click on map to pick coordinates\" >\r\n                                    <ColorizeIcon />\r\n                                </Tooltip>\r\n                            </IconButton> */}\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => {\r\n                                    props.setSnackbarState({\r\n                                        open: true,\r\n                                        color: \"info\",\r\n                                        vertical: 'top',\r\n\r\n                                        horizontal: \"center\",\r\n                                        text: `Click anywhere on the map to drop start/end point`\r\n                                    })\r\n                                    setPickLngLat({ start: true })\r\n                                }} startIcon={<RoomIcon />}>\r\n                                Select location\r\n                        </Button>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    {(pickLngLat.start || pickLngLat.end || slat || elat) && <Grid item container>\r\n\r\n                        <Grid container item justify=\"space-between\" alignItems=\"center\">\r\n                            <Grid item >\r\n                                <Typography variant=\"body\" align=\"left\">From</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={9}>\r\n                                <TextField InputLabelProps={{ shrink: true }} variant=\"outlined\" error={error.slng} helperText={error.slng ? \"Enter valid coordinate\" : null} value={slng} label=\"Longitude\" onChange={(e) => setInputFields({ ...inputFields, slng: e.target.value })} />\r\n                                <TextField InputLabelProps={{ shrink: true }} variant=\"outlined\" error={error.slat} helperText={error.slat ? \"Enter valid coordinate\" : null} value={slat} label=\"Latitude\" onChange={(e) => setInputFields({ ...inputFields, slat: e.target.value })} />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid container item justify=\"space-between\" alignItems=\"center\">\r\n                            <Grid item >\r\n                                <Typography variant=\"body\" align=\"left\">To</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={9}>\r\n                                <TextField InputLabelProps={{ shrink: true }} variant=\"outlined\" error={error.elng} helperText={error.elng ? \"Enter valid coordinate\" : null} value={elng} label=\"Longitude\" onChange={(e) => setInputFields({ ...inputFields, elng: e.target.value })} />\r\n                                <TextField InputLabelProps={{ shrink: true }} variant=\"outlined\" error={error.elat} helperText={error.elat ? \"Enter valid coordinate\" : null} value={elat} label=\"Latitude\" onChange={(e) => setInputFields({ ...inputFields, elat: e.target.value })} />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>}\r\n\r\n                    <Grid container item justify=\"space-between\" alignItems=\"center\">\r\n                        <Grid item >\r\n                            <Typography variant=\"body\" align=\"left\">Color</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <Button variant=\"contained\" style={{ backgroundColor: color }} color=\"primary\" onClick={openPopover} startIcon={<ColorLensIcon />}>\r\n                                Select color\r\n                        </Button>\r\n                            <Popover\r\n                                open={isPopoverOpen}\r\n                                anchorEl={popoverAnchor}\r\n                                onClose={closePopover}\r\n                                anchorOrigin={{\r\n                                    vertical: 'bottom',\r\n                                    horizontal: 'left',\r\n                                }}\r\n                            >\r\n                                <GithubPicker color={color} onChangeComplete={(color) => {\r\n                                    props.drawControl.current.draw.delete(['start', 'end'])\r\n                                    setTimeout(() => {\r\n                                        props.drawControl.current.draw.add({\r\n                                            type: 'Feature',\r\n                                            properties: { color: color.hex },\r\n                                            id: 'start',\r\n                                            geometry: { type: 'Point', coordinates: [slng, slat] }\r\n\r\n                                        })\r\n                                        props.drawControl.current.draw.add({\r\n                                            type: 'Feature',\r\n                                            properties: { color: color.hex },\r\n                                            id: 'end',\r\n                                            geometry: { type: 'Point', coordinates: [elng, elat] }\r\n\r\n                                        })\r\n\r\n                                    }, 1)\r\n                                    setInputFields({ ...inputFields, color: color.hex })\r\n                                    closePopover()\r\n                                }} />\r\n\r\n                            </Popover>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container item justify=\"space-between\" alignItems=\"center\">\r\n                        <TextField multiline fullWidth label=\"Description\" value={description} onChange={(e) => setInputFields({ ...inputFields, description: e.target.value })} />\r\n\r\n                    </Grid>\r\n                    <Grid container item justify=\"flex-end\" alignItems=\"center\">\r\n                        <Button onClick={cancel} variant=\"contained\">Cancel</Button>\r\n                        <Button ref={saveBtn} onClick={save} variant=\"contained\" color=\"primary\">Save</Button>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </Box >\r\n        </Card >\r\n    );\r\n}\r\n\r\nexport default EditMovement;","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\MovementSummary.js",["92","93","94"],"import React, { useState } from 'react';\r\nimport { Box, Button, Card, Dialog, DialogActions, DialogTitle, Divider, Grid, IconButton, Popover, TextField, Typography } from '@material-ui/core';\r\nimport ArrowRightAltIcon from '@material-ui/icons/ArrowRightAlt';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditMovement from './EditMovement';\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport SubjectIcon from '@material-ui/icons/Subject';\r\nimport EmojiTransportationIcon from '@material-ui/icons/EmojiTransportation';\r\nimport haversine from 'haversine'\r\n\r\nfunction MovementSummary(props) {\r\n\r\n    const line = props.line;\r\n    const [hover, setHover] = useState(false)\r\n    const [editOpen, setEditOpen] = useState(false)\r\n    const [deleteOpen, setDeleteOpen] = React.useState(false);\r\n\r\n    const save = (inputFields) => {\r\n        props.editMovement(inputFields)\r\n        setEditOpen(false);\r\n    }\r\n\r\n    return (<div>\r\n\r\n        {!editOpen ? <Card key={line.id} onMouseEnter={() => setHover(true)}\r\n            onMouseLeave={() => setHover(false)}>\r\n            <Box m={2}>\r\n                <Grid container spacing={2}>\r\n                    <Grid container item justify=\"space-between\">\r\n                        <Grid item>\r\n                            <Typography variant=\"h4\" style={{ color: line.color, marginLeft: 20 }}  >{line.title || `Movement #${props.index}`}</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                            <IconButton size=\"small\" style={{ display: hover ? \"inline\" : \"none\" }} color=\"primary\" onClick={() => setEditOpen(true)}>\r\n                                <EditIcon />\r\n                            </IconButton>\r\n                            <IconButton size=\"small\" style={{ display: hover ? \"inline\" : \"none\" }} color=\"primary\" onClick={() => setDeleteOpen(true)}>\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                            <Dialog\r\n                                open={deleteOpen}\r\n                                onClose={() => setDeleteOpen(false)}\r\n                            >\r\n                                <DialogTitle >{\"Delete movement?\"}</DialogTitle>\r\n                                <DialogActions>\r\n                                    <Button onClick={() => setDeleteOpen(false)} color=\"primary\">\r\n                                        No\r\n                                    </Button>\r\n                                    <Button onClick={() => {\r\n                                        props.deleteMovement(line.id)\r\n                                        setDeleteOpen(false)\r\n                                    }} color=\"primary\" autoFocus>\r\n                                        Yes\r\n                                    </Button>\r\n                                </DialogActions>\r\n                            </Dialog>\r\n                        </Grid>\r\n\r\n\r\n                    </Grid>\r\n                    <Grid container item alignItems=\"center\">\r\n                        <Grid item>\r\n                            <RoomIcon />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography variant=\"h5\">\r\n                                {`(${line.coordinates[0][0]},${line.coordinates[0][1]})`}\r\n                                <ArrowRightAltIcon />\r\n                                {`(${line.coordinates[1][0]},${line.coordinates[1][1]})`}\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container item alignItems=\"center\">\r\n                        <Grid item>\r\n                            <EmojiTransportationIcon />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography variant=\"h5\">\r\n                                Total distance: {haversine({ latitude: line.coordinates[0][1], longitude: line.coordinates[0][0] },\r\n                                { latitude: line.coordinates[1][1], longitude: line.coordinates[1][0] }).toFixed(4)} km\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container item>\r\n                        <Grid item>\r\n                            <SubjectIcon />\r\n                        </Grid>\r\n                        <Grid item xs={11}>\r\n                            <Typography align=\"left\" variant=\"body1\">{line.description || \"No description given\"}</Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Card> : <EditMovement\r\n                save={save}\r\n                setInputOpen={setEditOpen}\r\n                lastClickLngLat={props.lastClickLngLat}\r\n                drawControl={props.drawControl}\r\n                renderLines={props.renderLines}\r\n                movement={line}\r\n                setSnackbarState={props.setSnackbarState} />\r\n        }\r\n\r\n\r\n    </div >)\r\n}\r\n\r\nexport default MovementSummary;",{"ruleId":"95","severity":1,"message":"96","line":251,"column":38,"nodeType":"97","messageId":"98","endLine":251,"endColumn":40},{"ruleId":"95","severity":1,"message":"96","line":252,"column":41,"nodeType":"97","messageId":"98","endLine":252,"endColumn":43},{"ruleId":"95","severity":1,"message":"96","line":253,"column":41,"nodeType":"97","messageId":"98","endLine":253,"endColumn":43},{"ruleId":"95","severity":1,"message":"96","line":254,"column":41,"nodeType":"97","messageId":"98","endLine":254,"endColumn":43},{"ruleId":"95","severity":1,"message":"99","line":255,"column":24,"nodeType":"97","messageId":"98","endLine":255,"endColumn":26},{"ruleId":"100","severity":1,"message":"101","line":288,"column":8,"nodeType":"102","endLine":288,"endColumn":34,"suggestions":"103"},{"ruleId":"104","severity":1,"message":"105","line":337,"column":36,"nodeType":"106","messageId":"107","endLine":353,"endColumn":18},{"ruleId":"95","severity":1,"message":"96","line":340,"column":39,"nodeType":"97","messageId":"98","endLine":340,"endColumn":41},{"ruleId":"95","severity":1,"message":"96","line":369,"column":54,"nodeType":"97","messageId":"98","endLine":369,"endColumn":56},{"ruleId":"95","severity":1,"message":"96","line":369,"column":122,"nodeType":"97","messageId":"98","endLine":369,"endColumn":124},{"ruleId":"108","severity":1,"message":"109","line":426,"column":29,"nodeType":"110","endLine":426,"endColumn":87},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"100","severity":1,"message":"115","line":64,"column":8,"nodeType":"102","endLine":64,"endColumn":31,"suggestions":"116"},{"ruleId":"111","replacedBy":"117"},{"ruleId":"113","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":1,"column":17,"nodeType":"121","messageId":"122","endLine":1,"endColumn":25},{"ruleId":"119","severity":1,"message":"123","line":2,"column":8,"nodeType":"121","messageId":"122","endLine":2,"endColumn":12},{"ruleId":"119","severity":1,"message":"124","line":3,"column":8,"nodeType":"121","messageId":"122","endLine":3,"endColumn":12},{"ruleId":"119","severity":1,"message":"125","line":4,"column":8,"nodeType":"121","messageId":"122","endLine":4,"endColumn":11},{"ruleId":"119","severity":1,"message":"126","line":5,"column":8,"nodeType":"121","messageId":"122","endLine":5,"endColumn":14},{"ruleId":"119","severity":1,"message":"127","line":6,"column":8,"nodeType":"121","messageId":"122","endLine":6,"endColumn":17},{"ruleId":"119","severity":1,"message":"128","line":7,"column":8,"nodeType":"121","messageId":"122","endLine":7,"endColumn":14},{"ruleId":"119","severity":1,"message":"129","line":8,"column":8,"nodeType":"121","messageId":"122","endLine":8,"endColumn":21},{"ruleId":"119","severity":1,"message":"130","line":9,"column":8,"nodeType":"121","messageId":"122","endLine":9,"endColumn":21},{"ruleId":"119","severity":1,"message":"131","line":10,"column":8,"nodeType":"121","messageId":"122","endLine":10,"endColumn":25},{"ruleId":"119","severity":1,"message":"132","line":11,"column":8,"nodeType":"121","messageId":"122","endLine":11,"endColumn":19},{"ruleId":"119","severity":1,"message":"133","line":12,"column":10,"nodeType":"121","messageId":"122","endLine":12,"endColumn":20},{"ruleId":"119","severity":1,"message":"134","line":12,"column":22,"nodeType":"121","messageId":"122","endLine":12,"endColumn":32},{"ruleId":"119","severity":1,"message":"135","line":13,"column":8,"nodeType":"121","messageId":"122","endLine":13,"endColumn":25},{"ruleId":"119","severity":1,"message":"136","line":14,"column":8,"nodeType":"121","messageId":"122","endLine":14,"endColumn":16},{"ruleId":"119","severity":1,"message":"137","line":15,"column":8,"nodeType":"121","messageId":"122","endLine":15,"endColumn":18},{"ruleId":"119","severity":1,"message":"138","line":1,"column":17,"nodeType":"121","messageId":"122","endLine":1,"endColumn":26},{"ruleId":"119","severity":1,"message":"124","line":5,"column":15,"nodeType":"121","messageId":"122","endLine":5,"endColumn":19},{"ruleId":"119","severity":1,"message":"136","line":2,"column":8,"nodeType":"121","messageId":"122","endLine":2,"endColumn":16},{"ruleId":"119","severity":1,"message":"137","line":3,"column":8,"nodeType":"121","messageId":"122","endLine":3,"endColumn":18},{"ruleId":"119","severity":1,"message":"139","line":4,"column":8,"nodeType":"121","messageId":"122","endLine":4,"endColumn":20},{"ruleId":"119","severity":1,"message":"140","line":7,"column":8,"nodeType":"121","messageId":"122","endLine":7,"endColumn":19},{"ruleId":"119","severity":1,"message":"141","line":8,"column":29,"nodeType":"121","messageId":"122","endLine":8,"endColumn":36},{"ruleId":"119","severity":1,"message":"133","line":8,"column":44,"nodeType":"121","messageId":"122","endLine":8,"endColumn":54},{"ruleId":"119","severity":1,"message":"142","line":8,"column":76,"nodeType":"121","messageId":"122","endLine":8,"endColumn":83},{"ruleId":"100","severity":1,"message":"143","line":51,"column":8,"nodeType":"102","endLine":51,"endColumn":10,"suggestions":"144"},{"ruleId":"100","severity":1,"message":"145","line":99,"column":8,"nodeType":"102","endLine":99,"endColumn":31,"suggestions":"146"},{"ruleId":"119","severity":1,"message":"141","line":2,"column":65,"nodeType":"121","messageId":"122","endLine":2,"endColumn":72},{"ruleId":"119","severity":1,"message":"147","line":2,"column":92,"nodeType":"121","messageId":"122","endLine":2,"endColumn":99},{"ruleId":"119","severity":1,"message":"127","line":2,"column":101,"nodeType":"121","messageId":"122","endLine":2,"endColumn":110},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'renderLines'. Either include it or remove the dependency array.","ArrayExpression",["148"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'dist', 'dist', 'nextIndex'.","ArrowFunctionExpression","unsafeRefs","react/style-prop-object","Style prop value must be an object","JSXAttribute","no-native-reassign",["149"],"no-negated-in-lhs",["150"],"React Hook useEffect has missing dependencies: 'pickLngLat.end' and 'pickLngLat.start'. Either include them or remove the dependency array.",["151"],["149"],["150"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Grid' is defined but never used.","'Card' is defined but never used.","'Box' is defined but never used.","'Button' is defined but never used.","'TextField' is defined but never used.","'Dialog' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'DialogTitle' is defined but never used.","'IconButton' is defined but never used.","'Typography' is defined but never used.","'ArrowRightAltIcon' is defined but never used.","'EditIcon' is defined but never used.","'DeleteIcon' is defined but never used.","'useEffect' is defined but never used.","'ColorizeIcon' is defined but never used.","'SubjectIcon' is defined but never used.","'Divider' is defined but never used.","'Tooltip' is defined but never used.","React Hook useEffect has a missing dependency: 'props.movement'. Either include it or remove the dependency array.",["152"],"React Hook useEffect has missing dependencies: 'color', 'inputFields', 'pickLngLat.end', 'pickLngLat.start', and 'props.drawControl'. Either include them or remove the dependency array. You can also do a functional update 'setInputFields(i => ...)' if you only need 'inputFields' in the 'setInputFields' call.",["153"],"'Popover' is defined but never used.",{"desc":"154","fix":"155"},"no-global-assign","no-unsafe-negation",{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},"Update the dependencies array to be: [movements, renderLines, snackbarState]",{"range":"162","text":"163"},"Update the dependencies array to be: [pickLngLat.end, pickLngLat.start, props.lastClickLngLat]",{"range":"164","text":"165"},"Update the dependencies array to be: [props.movement]",{"range":"166","text":"167"},"Update the dependencies array to be: [color, inputFields, pickLngLat.end, pickLngLat.start, props.drawControl, props.lastClickLngLat]",{"range":"168","text":"169"},[10130,10156],"[movements, renderLines, snackbarState]",[1796,1819],"[pickLngLat.end, pickLngLat.start, props.lastClickLngLat]",[1625,1627],"[props.movement]",[3271,3294],"[color, inputFields, pickLngLat.end, pickLngLat.start, props.drawControl, props.lastClickLngLat]"]