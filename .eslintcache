[{"C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\MapContainer.js":"1","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\App.js":"2","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\NewMovementInput.js":"3","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\MovementsList.js":"4","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\index.js":"5","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\CityPin.js":"6","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\RouteList.js":"7","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\TabMenu.js":"8","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\EditMovement.js":"9","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\MovementSummary.js":"10"},{"size":16287,"mtime":1611535449160,"results":"11","hashOfConfig":"12"},{"size":192,"mtime":1611347417367,"results":"13","hashOfConfig":"12"},{"size":3159,"mtime":1611348152275,"results":"14","hashOfConfig":"12"},{"size":2296,"mtime":1611434122240,"results":"15","hashOfConfig":"12"},{"size":248,"mtime":1611426413973,"results":"16","hashOfConfig":"12"},{"size":868,"mtime":1611029231640,"results":"17","hashOfConfig":"12"},{"size":1822,"mtime":1611535302888,"results":"18","hashOfConfig":"12"},{"size":741,"mtime":1611337814176,"results":"19","hashOfConfig":"12"},{"size":11205,"mtime":1611535292907,"results":"20","hashOfConfig":"12"},{"size":5120,"mtime":1611535330166,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},"1pl14ye",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"31"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\MapContainer.js",["48","49","50","51"],"import React, { useState, useRef, useEffect, useMemo } from 'react';\r\nimport ReactMapboxGl from 'react-mapbox-gl';\r\nimport DrawControl from 'react-mapbox-gl-draw';\r\nimport '@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css';\r\nimport StaticMode from '@mapbox/mapbox-gl-draw-static-mode'\r\n\r\nimport RouteList from './RouteList';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport { Button } from '@material-ui/core';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\n\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport TabMenu from './TabMenu';\r\nimport { LngLat } from 'mapbox-gl';\r\nimport EditMovement from './EditMovement';\r\nimport MovementSummary from './MovementSummary';\r\n\r\n// import RoomIcon from '@material-ui/icons/Room';\r\n\r\nfunction MapContainer(props) {\r\n\r\n    // Higher sensitivity -> grid is more dense\r\n    const GRID_SENSITIVITY = 2\r\n    const drawControl = useRef(null)\r\n    const [movements, setMovements] = useState([])\r\n    const [mapCenter, setMapCenter] = useState([19.8770, 45.2479909])\r\n    const [lastClickLngLat, setLastClickLngLat] = useState(null)\r\n    const [route, setRoute] = useState(null)\r\n\r\n    // rename this shit\r\n    const [inputOpen, setInputOpen] = useState(false)\r\n\r\n    const [tabIndex, setTabIndex] = useState(0)\r\n\r\n    const tabChange = (event, newValue) => {\r\n        if (newValue === 0) renderLines();\r\n        if (newValue === 1) computeRoute();\r\n        setTabIndex(newValue);\r\n    };\r\n\r\n    const renderTabContents = (i) => {\r\n        switch (i) {\r\n            case 0:\r\n                return <div style={{ maxHeight: '85vh', overflow: 'auto' }}>\r\n                    {movements.map((e, i) => (\r\n                        <MovementSummary\r\n                            line={e}\r\n                            index={i}\r\n                            deleteMovement={deleteMovement}\r\n                            editMovement={editMovement}\r\n                            renderLines={renderLines}\r\n                            lastClickLngLat={lastClickLngLat}\r\n                            drawControl={drawControl}\r\n                            setSnackbarState={setSnackbarState} />\r\n                    ))}\r\n\r\n                    {!inputOpen ?\r\n                        <Button onClick={() => setInputOpen(true)} size=\"large\" color=\"primary\" startIcon={<AddCircleIcon />}>\r\n                            Add new movement\r\n                    </Button> :\r\n                        <EditMovement\r\n                            setInputOpen={setInputOpen}\r\n                            lastClickLngLat={lastClickLngLat}\r\n                            save={addMovement}\r\n                            renderLines={renderLines}\r\n                            drawControl={drawControl}\r\n                            setSnackbarState={setSnackbarState}\r\n                        />\r\n                    }\r\n\r\n\r\n                </div>\r\n            case 1:\r\n                return <div style={{ maxHeight: '85vh', overflow: 'auto' }}>\r\n                    <RouteList\r\n                        computeRoute={computeRoute}\r\n                        renderLines={renderLines}\r\n                        route={route}\r\n                    />\r\n                </div>\r\n\r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n    // Snackbar state and aux funcs\r\n    const [snackbarState, setSnackbarState] = useState({\r\n        open: false,\r\n        vertical: 'top',\r\n        horizontal: 'center',\r\n        text: \"\",\r\n        color: \"danger\"\r\n    });\r\n    const { vertical, horizontal, open } = snackbarState\r\n\r\n    const Alert = (props) => {\r\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n    }\r\n\r\n    const handleSnackbarClose = () => {\r\n        setSnackbarState({ ...snackbarState, open: false });\r\n    };\r\n\r\n    // Color each line according to it's lineColor property\r\n    const drawStyles = [{\r\n        'id': 'custom-line',\r\n        'type': 'line',\r\n        'filter': ['all',\r\n            ['==', '$type', 'LineString'],\r\n            ['has', 'user_lineColor']\r\n        ],\r\n        'paint': {\r\n            'line-color': ['get', 'user_lineColor'],\r\n        }\r\n    },\r\n    {\r\n        'id': 'highlight-vertices',\r\n        'type': 'circle',\r\n        'filter': ['all',\r\n            ['==', '$type', 'LineString'],\r\n            ['has', 'user_lineColor']\r\n        ],\r\n        'paint': {\r\n            'circle-radius': 3,\r\n            'circle-color': ['get', 'user_lineColor']\r\n        }\r\n    },\r\n    {\r\n        'id': 'cities',\r\n        'type': 'circle',\r\n        'filter': ['all',\r\n            ['==', '$type', 'Point'],\r\n            ['has', 'user_color']\r\n        ],\r\n        'paint': {\r\n            'circle-radius': 6,\r\n            'circle-color': ['get', 'user_color']\r\n        }\r\n    }];\r\n\r\n    const Map = useMemo(props => ReactMapboxGl({\r\n        accessToken:\r\n            'pk.eyJ1IjoidGVvZG9yc2siLCJhIjoiY2trMXJyZGxxMDZuMzJ2a3p1cGE4cXdxeCJ9.6y5XCy4WYn_JaPSEsANL5w'\r\n    }), [])\r\n\r\n    const mapClick = (map, e) => {\r\n        const { lng, lat } = e.lngLat;\r\n        const roundedLngLat = new LngLat(lng.toFixed(GRID_SENSITIVITY), lat.toFixed(GRID_SENSITIVITY))\r\n        // console.log(`Clicked at ${lng} ${lat}`);\r\n        // console.log(`Current Map Center: ${map.getCenter()}`);\r\n        setLastClickLngLat(roundedLngLat)\r\n    }\r\n\r\n    // CRUD operations\r\n    const addMovement = ({ slat, slng, elat, elng, title, description, color }) => {\r\n        if (!isMovementUnique(slat, slng, elat, elng, description)) {\r\n            setSnackbarState({\r\n                ...snackbarState,\r\n                open: true,\r\n                color: \"error\",\r\n                horizontal: \"center\",\r\n                text: `Movement must have unique start, end coordinates`\r\n            });\r\n        }\r\n        else {\r\n            const newLine = {\r\n                type: 'LineString',\r\n                id: uuidv4(),\r\n                coordinates: [[parseFloat(slng), parseFloat(slat)], [parseFloat(elng), parseFloat(elat)]],\r\n                title,\r\n                description,\r\n                color\r\n            }\r\n            setMovements([...movements, newLine])\r\n            setSnackbarState({\r\n                ...snackbarState,\r\n                open: true,\r\n                color: \"success\",\r\n                horizontal: \"center\",\r\n                text: `Successfully added movement`\r\n            });\r\n\r\n            // Fly camera to center of movement\r\n            setMapCenter([(slng + elng) / 2, (slat + elat) / 2])\r\n        }\r\n\r\n    }\r\n\r\n    const editMovement = ({ slat, slng, elat, elng, title, description, color, id }) => {\r\n        const thisMovement = movements.find(e => e.id === id);\r\n        if (!isMovementUnique(slat, slng, elat, elng, description, id)) {\r\n            setSnackbarState({\r\n                ...snackbarState,\r\n                open: true,\r\n                color: \"error\",\r\n                horizontal: \"center\",\r\n                text: `Movement must have unique start, end coordinates`\r\n            });\r\n        }\r\n        else {\r\n            // Change the movement in place\r\n            thisMovement.coordinates[0][0] = parseFloat(slng);\r\n            thisMovement.coordinates[0][1] = parseFloat(slat);\r\n            thisMovement.coordinates[1][0] = parseFloat(elng);\r\n            thisMovement.coordinates[1][1] = parseFloat(elat);\r\n            thisMovement.description = description;\r\n            thisMovement.title = title;\r\n            thisMovement.color = color;\r\n\r\n            // Map only updates Features if you edit their geometry.\r\n            // Updating fields in the \"properties\" of the Feature has to be done explicitly:\r\n            drawControl.current.draw.setFeatureProperty(id, \"color\", color)\r\n\r\n            setMovements(movements)\r\n\r\n            setSnackbarState({\r\n                ...snackbarState,\r\n                open: true,\r\n                color: \"success\",\r\n                horizontal: \"center\",\r\n                text: `Successfully edited movement`\r\n            });\r\n        }\r\n    }\r\n\r\n    const deleteMovement = (id) => {\r\n        setMovements(movements.filter((e, i) => e.id !== id))\r\n        setSnackbarState({\r\n            ...snackbarState,\r\n            open: true,\r\n            color: \"success\",\r\n            horizontal: \"center\",\r\n            text: `Successfully deleted movement`\r\n        });\r\n    }\r\n\r\n    const isMovementUnique = (slat, slng, elat, elng, description, id = null) => {\r\n        var isUnique = true;\r\n        movements.forEach((e, i) => {\r\n            console.log(`${e.coordinates[0][0]} and ${slat}`)\r\n            const identical =\r\n                (e.coordinates[0][1] === slat &&\r\n                    e.coordinates[0][0] === slng &&\r\n                    e.coordinates[1][1] === elat &&\r\n                    e.coordinates[1][0] === elng &&\r\n                    id != e.id\r\n                )\r\n            if (identical) {\r\n                isUnique = false;\r\n            }\r\n        })\r\n        return isUnique;\r\n    }\r\n\r\n\r\n    // Sets the current features to the movements array\r\n    const renderLines = () => {\r\n        if (drawControl.current) {\r\n            drawControl.current.draw.set({\r\n                type: 'FeatureCollection',\r\n                features: movements.map((line, i) => {\r\n                    return {\r\n                        type: 'Feature',\r\n                        properties: { description: line.description, lineColor: line.color, }, //Description needs to be in properties sub-object ONLY for adding to map\r\n                        id: line.id,\r\n                        geometry: { type: 'LineString', coordinates: line.coordinates, }\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    // Call renderLines when movement list is edited\r\n    useEffect(() => {\r\n        renderLines()\r\n    }, [movements, snackbarState])\r\n\r\n\r\n    const cartDist = (pt1, pt2) => {\r\n        const [x1, y1] = pt1;\r\n        const [x2, y2] = pt2;\r\n        return Math.sqrt(Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2))\r\n    }\r\n\r\n    const movementsEmpty = (movements) => {\r\n        var empty = true;\r\n        movements.forEach((e, i) => {\r\n            if (e.coordinates.length > 0) {\r\n                empty = false;\r\n            }\r\n        })\r\n        return empty\r\n    }\r\n\r\n    // Visits all start/end points, prioritizing nearest. Preserves start->end of each movement\r\n    const computeRoute = () => {\r\n        if (drawControl.current && movements.length > 1) {\r\n            // First point of route is start of first line created\r\n            const startPoint = movements[0].coordinates[0]\r\n            const routeNodes = [{\r\n                coordinates: startPoint,\r\n                type: 'start',\r\n                title: movements[0].title\r\n            }]\r\n\r\n            // Only grab the coordinates\r\n            const _movements = movements.map((e, i) => {\r\n                return { title: e.title, coordinates: [e.coordinates[0], e.coordinates[1]] }\r\n            })\r\n\r\n\r\n            // Pop the start point from _movements\r\n            _movements[0].coordinates.splice(0, 1)\r\n\r\n            // Initialize start point\r\n            var nextNearestPoint = {\r\n                coordinates: [0, 0],\r\n                type: null,\r\n            }\r\n            var nextIndex = [-1, -1]\r\n\r\n            while (!movementsEmpty(_movements)) {\r\n                // Find nearest next point\r\n                var dist = Infinity\r\n                _movements.forEach((e, i) => {\r\n                    var prevPoint = routeNodes[routeNodes.length - 1].coordinates\r\n\r\n                    if (e.coordinates === []) {\r\n                        // Popped both start and end coordinate of point e\r\n                    }\r\n                    else if (e.coordinates[0]) {\r\n                        if (cartDist(prevPoint, e.coordinates[0]) < dist) {\r\n                            dist = cartDist(prevPoint, e.coordinates[0])\r\n                            nextNearestPoint.coordinates = e.coordinates[0]\r\n                            // If there is a 2nd coordinate, that means this is the start coordinate, otherwise this is the end coordinate\r\n                            nextNearestPoint.type = e.coordinates[1] ? 'start' : 'end'\r\n                            nextNearestPoint.title = e.title ? e.title : `Movement #${i}`\r\n                            nextIndex = i\r\n                        }\r\n                    }\r\n                })\r\n\r\n                // Pop the point from it's corresponding movement\r\n                // By always popping the first element, we ensure the end of a movement will never be visited before it's corresponding start\r\n                _movements[nextIndex].coordinates.splice(0, 1);\r\n                routeNodes.push({\r\n                    coordinates: nextNearestPoint.coordinates,\r\n                    type: nextNearestPoint.type,\r\n                    title: nextNearestPoint.title\r\n                })\r\n            }\r\n\r\n            // Compares subsequent points in routeCoordinates and removes duplicates\r\n            // Prevents [T->M->M->S], instead returns [T->M->S]\r\n            routeNodes.forEach((e, i) => {\r\n                if (routeNodes[i + 1] != null) {\r\n                    if (routeNodes[i].coordinates[0] === routeNodes[i + 1].coordinates[0] && routeNodes[i].coordinates[1] === routeNodes[i + 1].coordinates[1]) {\r\n                        routeNodes.splice(i, 1)\r\n                    }\r\n                }\r\n            })\r\n\r\n            setRoute(routeNodes)\r\n\r\n            setTimeout(() => {\r\n                // Draw route\r\n                drawControl.current.draw.deleteAll()\r\n\r\n                drawControl.current.draw.set({\r\n                    type: 'FeatureCollection',\r\n                    features: [{\r\n                        type: 'Feature',\r\n                        properties: { lineColor: \"#000\" },\r\n                        geometry: { type: 'LineString', coordinates: routeNodes.map((e) => e.coordinates) }\r\n                    }]\r\n                })\r\n            }, 1)\r\n        }\r\n        else {\r\n            setSnackbarState({\r\n                ...snackbarState,\r\n                open: true,\r\n                color: \"error\",\r\n                horizontal: \"center\",\r\n                text: movements.length > 1 ? `Cannot compute route for given movements` : `Enter more than one movement before computing route`\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box m={2} >\r\n            <Grid container justify=\"space-between\">\r\n                <Snackbar\r\n                    anchorOrigin={{ vertical, horizontal }}\r\n                    open={open}\r\n                    onClose={handleSnackbarClose}\r\n                    key={vertical + horizontal}>\r\n\r\n                    <Alert onClose={handleSnackbarClose} severity={snackbarState.color}>\r\n                        {snackbarState.text}\r\n                    </Alert>\r\n                </Snackbar >\r\n                <Grid item xs={4}>\r\n                    <Card >\r\n                        <TabMenu tabIndex={tabIndex} tabChange={tabChange} />\r\n                        {renderTabContents(tabIndex)}\r\n                    </Card>\r\n                </Grid>\r\n                <Grid item xs={8}>\r\n                    <Card>\r\n                        <Map\r\n                            style=\"mapbox://styles/teodorsk/ckkabo7v435c417mymuscsd2k\"\r\n                            containerStyle={{\r\n                                height: '90vh',\r\n                            }}\r\n                            onClick={mapClick}\r\n                            center={mapCenter}>\r\n\r\n                            <DrawControl\r\n                                modes={{ _static: StaticMode }}\r\n                                defaultMode=\"_static\"\r\n                                userProperties={true}\r\n                                styles={drawStyles}\r\n                                ref={drawControl}\r\n                                displayControlsDefault={false}\r\n                                clickBuffer={10} />\r\n                        </Map>\r\n                    </Card>\r\n                </Grid>\r\n            </Grid>\r\n        </Box>\r\n\r\n    );\r\n}\r\n\r\nexport default MapContainer;",["52","53"],"C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\App.js",[],"C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\NewMovementInput.js",["54"],"import React, { useEffect, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { GithubPicker } from 'react-color';\r\n\r\n\r\n\r\nfunction NewMovementInput(props) {\r\n\r\n    const [slat, setSLat] = useState(0);\r\n    const [slng, setSLng] = useState(0);\r\n    const [elat, setELat] = useState(0);\r\n    const [elng, setELng] = useState(0);\r\n    const [description, setDesc] = useState(\"\");\r\n    const [title, setTitle] = useState(\"\")\r\n    const [color, setColor] = useState('#008800')\r\n\r\n    // const [inputFields, setInputFields] = useState({\r\n    //     slat: 0,\r\n    //     slng: 0,\r\n    //     elat: 0,\r\n    //     elng: 0,\r\n    //     title: \"\",\r\n    //     description: \"\"\r\n    // })\r\n\r\n\r\n    // Toggles state of picking Lng Lat inputs with mouseclick\r\n    const [pickLngLat, setPickLngLat] = useState({\r\n        start: false,\r\n        end: false\r\n    })\r\n\r\n    const addMovement = (e) => {\r\n        e.preventDefault()\r\n        console.log(`received lnglat: ${slng} ${slat}`)\r\n        props.addMovement(parseFloat(slat), parseFloat(slng), parseFloat(elat), parseFloat(elng), title, description, color)\r\n        resetFields()\r\n    }\r\n\r\n    const resetFields = () => {\r\n        setSLat(0)\r\n        setSLng(0)\r\n        setELat(0)\r\n        setELng(0)\r\n        setTitle(\"\")\r\n        setDesc(\"\")\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!props.lastClickLngLat) return;\r\n        const { lng, lat } = props.lastClickLngLat;\r\n\r\n        if (pickLngLat.start) {\r\n            setSLat(lat)\r\n            setSLng(lng)\r\n            setPickLngLat({ start: false, end: true })\r\n        }\r\n        if (pickLngLat.end) {\r\n            setELat(lat)\r\n            setELng(lng)\r\n            setPickLngLat({ end: false })\r\n        }\r\n    }, [props.lastClickLngLat])\r\n\r\n    return (\r\n        <div style={{ backgroundColor: color }}>\r\n            <TextField onChange={(e) => setSLat(e.target.value)} value={slat} label=\"Start Lat\" variant=\"outlined\" />\r\n            <TextField onChange={(e) => setSLng(e.target.value)} value={slng} label=\"Start Lng\" variant=\"outlined\" />\r\n            <Button onClick={() => { setPickLngLat({ start: true }) }}>pick</Button>\r\n            <br />\r\n            <TextField onChange={(e) => setELat(e.target.value)} value={elat} label=\"End Lat\" variant=\"outlined\" />\r\n            <TextField onChange={(e) => setELng(e.target.value)} value={elng} label=\"End Lng\" variant=\"outlined\" />\r\n            <br />\r\n            <TextField onChange={(e) => setDesc(e.target.value)} value={description} label=\"Description\" variant=\"outlined\" />\r\n            <br />\r\n            <TextField onChange={(e) => setTitle(e.target.value)} value={title} label=\"Title\" variant=\"outlined\" />\r\n            <br />\r\n            <GithubPicker color={color} onChangeComplete={(color) => setColor(color.hex)} />\r\n            <br />\r\n            <Button onClick={addMovement}>Add movement</Button>\r\n            <Button onClick={props.computeRoute}>Compute Route</Button>\r\n            <Button onClick={props.renderLines}>Render Movements</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NewMovementInput;",["55","56"],"C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\MovementsList.js",["57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72"],"import React, { useState } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { IconButton, Typography } from '@material-ui/core';\r\nimport ArrowRightAltIcon from '@material-ui/icons/ArrowRightAlt';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport MovementSummary from './MovementSummary';\r\n\r\n\r\nfunction MovementsList(props) {\r\n\r\n    // const [openDialog, setOpenDialog] = React.useState(false);\r\n\r\n    // const [slat, setSLat] = useState(0);\r\n    // const [slng, setSLng] = useState(0);\r\n    // const [elat, setELat] = useState(0);\r\n    // const [elng, setELng] = useState(0);\r\n    // const [description, setDescription] = useState(\"\")\r\n    // const [id, setID] = useState(null)\r\n\r\n    // const handleOpenDialog = (line) => {\r\n    //     setSLng(line.coordinates[0][0])\r\n    //     setSLat(line.coordinates[0][1])\r\n    //     setELng(line.coordinates[1][0])\r\n    //     setELat(line.coordinates[1][1])\r\n    //     setDescription(line.description)\r\n    //     setID(line.id)\r\n    //     setOpenDialog(true);\r\n    // };\r\n\r\n    // const handleCloseDialog = () => {\r\n    //     setOpenDialog(false);\r\n    // };\r\n\r\n    // const handleSave = () => {\r\n\r\n    //     props.editMovement(parseFloat(slat), parseFloat(slng), parseFloat(elat), parseFloat(elng), description, id)\r\n    //     handleCloseDialog();\r\n    // }\r\n\r\n    // refactored \r\n    const getLineDetails = (line, i) => {\r\n        return (\r\n            <MovementSummary line={line} index={i} deleteMovement={props.deleteMovement} editMovement={props.editMovement} renderLines={props.renderLines} />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {props.movements.map((line, i) => getLineDetails(line, i))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MovementsList;","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\index.js",[],"C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\CityPin.js",[],"C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\RouteList.js",[],"C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\TabMenu.js",[],"C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\EditMovement.js",["73","74"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport ColorLensIcon from '@material-ui/icons/ColorLens';\r\nimport { Box, Button, Card, Grid, Popover, TextField, Typography } from '@material-ui/core';\r\nimport { GithubPicker } from 'react-color';\r\n\r\nfunction EditMovement(props) {\r\n\r\n    const saveBtn = useRef(null)\r\n    const [inputFields, setInputFields] = useState({\r\n        slat: undefined,\r\n        slng: undefined,\r\n        elat: undefined,\r\n        elng: undefined,\r\n        title: \"\",\r\n        description: \"\",\r\n        color: \"#303f9f\",\r\n        id: 0\r\n    })\r\n\r\n    const [error, setError] = useState({\r\n        slng: false,\r\n        slat: false,\r\n        elng: false,\r\n        elat: false\r\n    })\r\n\r\n    //0 || props.movement.slat\r\n    const { slat, slng, elat, elng, title, description, color } = inputFields;\r\n\r\n    // Fill edit fields\r\n    useEffect(() => {\r\n        if (props.movement) {\r\n            const { id, coordinates, title, description, color } = props.movement\r\n\r\n            setInputFields({\r\n                slat: coordinates[0][1],\r\n                slng: coordinates[0][0],\r\n                elat: coordinates[1][1],\r\n                elng: coordinates[1][0],\r\n                title,\r\n                description,\r\n                color,\r\n                id\r\n            })\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    const [popoverAnchor, setPopoverAnchor] = useState(null);\r\n    const isPopoverOpen = Boolean(popoverAnchor);\r\n    const openPopover = (event) => {\r\n        setPopoverAnchor(event.currentTarget);\r\n    };\r\n    const closePopover = () => {\r\n        setPopoverAnchor(null);\r\n    };\r\n\r\n    const [pickLngLat, setPickLngLat] = useState({\r\n        start: false,\r\n        end: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (!props.lastClickLngLat) return;\r\n        const { lng, lat } = props.lastClickLngLat;\r\n\r\n        if (pickLngLat.start) {\r\n            setInputFields({ ...inputFields, slat: lat, slng: lng })\r\n            props.drawControl.current.draw.delete(['start', 'end'])\r\n            setTimeout(() => {\r\n                props.drawControl.current.draw.add({\r\n                    type: 'Feature',\r\n                    properties: { color: color }, //Description needs to be in properties sub-object ONLY for adding to map\r\n                    id: 'start',\r\n                    geometry: { type: 'Point', coordinates: [lng, lat] }\r\n\r\n                })\r\n\r\n            }, 1)\r\n            setPickLngLat({ start: false, end: true })\r\n        }\r\n        if (pickLngLat.end) {\r\n            setInputFields({ ...inputFields, elat: lat, elng: lng })\r\n            props.drawControl.current.draw.add({\r\n                type: 'Feature',\r\n                properties: { color: color }, //Description needs to be in properties sub-object ONLY for adding to map\r\n                id: 'end',\r\n                geometry: { type: 'Point', coordinates: [lng, lat] }\r\n\r\n            })\r\n            setPickLngLat({ end: false })\r\n        }\r\n    }, [props.lastClickLngLat])\r\n    // Scroll to botton (saveBtn) on render\r\n    useEffect(() => { saveBtn.current?.scrollIntoView(); }, [pickLngLat])\r\n    const save = () => {\r\n\r\n        // Non-zero validation\r\n        if ([slng, slat, elng, elat].includes(undefined)) {\r\n            setError({\r\n                slng: !slng,\r\n                slat: !slat,\r\n                elng: !elng,\r\n                elat: !elat\r\n            })\r\n        }\r\n        else {\r\n            props.setInputOpen(false)\r\n            props.save(inputFields)\r\n            props.renderLines()\r\n            resetFields()\r\n        }\r\n    }\r\n\r\n    const resetFields = () => {\r\n        setInputFields({\r\n            slat: 0,\r\n            slng: 0,\r\n            elat: 0,\r\n            elng: 0,\r\n            title: \"\",\r\n            description: \"\",\r\n            color: \"#303f9f\"\r\n        })\r\n    }\r\n\r\n    const cancel = () => {\r\n        props.setInputOpen(false)\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <Box m={2}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <TextField size=\"medium\" fullWidth autoFocus label=\"Title\" placeholder=\"Add Title\" value={title} onChange={(e) => setInputFields({ ...inputFields, title: e.target.value })} />\r\n                    </Grid>\r\n                    <Grid container item justify=\"space-between\" alignItems=\"center\">\r\n                        <Grid inputMode>\r\n                            <Typography variant=\"body\" align=\"left\">Location</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            {/* <Button onClick={() => { setPickLngLat({ start: true }) }} variant=\"contained\" color=\"primary\" startIcon={<ColorizeIcon />} >Pick location</Button> */}\r\n                            {/* <IconButton variant=\"contained\" color=\"primary\" onClick={() => { setPickLngLat({ start: true }) }}>\r\n                                <Tooltip title=\"Click on map to pick coordinates\" >\r\n                                    <ColorizeIcon />\r\n                                </Tooltip>\r\n                            </IconButton> */}\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => {\r\n                                    props.setSnackbarState({\r\n                                        open: true,\r\n                                        color: \"info\",\r\n                                        vertical: 'top',\r\n\r\n                                        horizontal: \"center\",\r\n                                        text: `Click anywhere on the map to drop start/end point`\r\n                                    })\r\n                                    setPickLngLat({ start: true })\r\n                                }} startIcon={<RoomIcon />}>\r\n                                Select location\r\n                        </Button>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    {(pickLngLat.start || pickLngLat.end || slat || elat) && <Grid item container>\r\n\r\n                        <Grid container item justify=\"space-between\" alignItems=\"center\">\r\n                            <Grid item >\r\n                                <Typography variant=\"body\" align=\"left\">From</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={9}>\r\n                                <TextField InputLabelProps={{ shrink: true }} variant=\"outlined\" error={error.slng} helperText={error.slng ? \"Enter valid coordinate\" : null} value={slng} label=\"Longitude\" onChange={(e) => setInputFields({ ...inputFields, slng: e.target.value })} />\r\n                                <TextField InputLabelProps={{ shrink: true }} variant=\"outlined\" error={error.slat} helperText={error.slat ? \"Enter valid coordinate\" : null} value={slat} label=\"Latitude\" onChange={(e) => setInputFields({ ...inputFields, slat: e.target.value })} />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid container item justify=\"space-between\" alignItems=\"center\">\r\n                            <Grid item >\r\n                                <Typography variant=\"body\" align=\"left\">To</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={9}>\r\n                                <TextField InputLabelProps={{ shrink: true }} variant=\"outlined\" error={error.elng} helperText={error.elng ? \"Enter valid coordinate\" : null} value={elng} label=\"Longitude\" onChange={(e) => setInputFields({ ...inputFields, elng: e.target.value })} />\r\n                                <TextField InputLabelProps={{ shrink: true }} variant=\"outlined\" error={error.elat} helperText={error.elat ? \"Enter valid coordinate\" : null} value={elat} label=\"Latitude\" onChange={(e) => setInputFields({ ...inputFields, elat: e.target.value })} />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>}\r\n\r\n                    <Grid container item justify=\"space-between\" alignItems=\"center\">\r\n                        <Grid item >\r\n                            <Typography variant=\"body\" align=\"left\">Color</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <Button variant=\"contained\" style={{ backgroundColor: color }} color=\"primary\" onClick={openPopover} startIcon={<ColorLensIcon />}>\r\n                                Select color\r\n                        </Button>\r\n                            <Popover\r\n                                open={isPopoverOpen}\r\n                                anchorEl={popoverAnchor}\r\n                                onClose={closePopover}\r\n                                anchorOrigin={{\r\n                                    vertical: 'bottom',\r\n                                    horizontal: 'left',\r\n                                }}\r\n                            >\r\n                                <GithubPicker color={color} onChangeComplete={(color) => {\r\n                                    props.drawControl.current.draw.delete(['start', 'end'])\r\n                                    setTimeout(() => {\r\n                                        props.drawControl.current.draw.add({\r\n                                            type: 'Feature',\r\n                                            properties: { color: color.hex },\r\n                                            id: 'start',\r\n                                            geometry: { type: 'Point', coordinates: [slng, slat] }\r\n\r\n                                        })\r\n                                        props.drawControl.current.draw.add({\r\n                                            type: 'Feature',\r\n                                            properties: { color: color.hex },\r\n                                            id: 'end',\r\n                                            geometry: { type: 'Point', coordinates: [elng, elat] }\r\n\r\n                                        })\r\n\r\n                                    }, 1)\r\n                                    setInputFields({ ...inputFields, color: color.hex })\r\n                                    closePopover()\r\n                                }} />\r\n\r\n                            </Popover>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container item justify=\"space-between\" alignItems=\"center\">\r\n                        <TextField multiline fullWidth label=\"Description\" value={description} onChange={(e) => setInputFields({ ...inputFields, description: e.target.value })} />\r\n\r\n                    </Grid>\r\n                    <Grid container item justify=\"flex-end\" alignItems=\"center\">\r\n                        <Button onClick={cancel} variant=\"contained\">Cancel</Button>\r\n                        <Button ref={saveBtn} onClick={save} variant=\"contained\" color=\"primary\">Save</Button>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </Box >\r\n        </Card >\r\n    );\r\n}\r\n\r\nexport default EditMovement;","C:\\Users\\Teodor\\Documents\\RR22\\rr-map\\src\\components\\MovementSummary.js",[],{"ruleId":"75","severity":1,"message":"76","line":254,"column":24,"nodeType":"77","messageId":"78","endLine":254,"endColumn":26},{"ruleId":"79","severity":1,"message":"80","line":284,"column":8,"nodeType":"81","endLine":284,"endColumn":34,"suggestions":"82"},{"ruleId":"83","severity":1,"message":"84","line":333,"column":36,"nodeType":"85","messageId":"86","endLine":349,"endColumn":18},{"ruleId":"87","severity":1,"message":"88","line":420,"column":29,"nodeType":"89","endLine":420,"endColumn":87},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"79","severity":1,"message":"94","line":64,"column":8,"nodeType":"81","endLine":64,"endColumn":31,"suggestions":"95"},{"ruleId":"90","replacedBy":"96"},{"ruleId":"92","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":1,"column":17,"nodeType":"100","messageId":"101","endLine":1,"endColumn":25},{"ruleId":"98","severity":1,"message":"102","line":2,"column":8,"nodeType":"100","messageId":"101","endLine":2,"endColumn":12},{"ruleId":"98","severity":1,"message":"103","line":3,"column":8,"nodeType":"100","messageId":"101","endLine":3,"endColumn":12},{"ruleId":"98","severity":1,"message":"104","line":4,"column":8,"nodeType":"100","messageId":"101","endLine":4,"endColumn":11},{"ruleId":"98","severity":1,"message":"105","line":5,"column":8,"nodeType":"100","messageId":"101","endLine":5,"endColumn":14},{"ruleId":"98","severity":1,"message":"106","line":6,"column":8,"nodeType":"100","messageId":"101","endLine":6,"endColumn":17},{"ruleId":"98","severity":1,"message":"107","line":7,"column":8,"nodeType":"100","messageId":"101","endLine":7,"endColumn":14},{"ruleId":"98","severity":1,"message":"108","line":8,"column":8,"nodeType":"100","messageId":"101","endLine":8,"endColumn":21},{"ruleId":"98","severity":1,"message":"109","line":9,"column":8,"nodeType":"100","messageId":"101","endLine":9,"endColumn":21},{"ruleId":"98","severity":1,"message":"110","line":10,"column":8,"nodeType":"100","messageId":"101","endLine":10,"endColumn":25},{"ruleId":"98","severity":1,"message":"111","line":11,"column":8,"nodeType":"100","messageId":"101","endLine":11,"endColumn":19},{"ruleId":"98","severity":1,"message":"112","line":12,"column":10,"nodeType":"100","messageId":"101","endLine":12,"endColumn":20},{"ruleId":"98","severity":1,"message":"113","line":12,"column":22,"nodeType":"100","messageId":"101","endLine":12,"endColumn":32},{"ruleId":"98","severity":1,"message":"114","line":13,"column":8,"nodeType":"100","messageId":"101","endLine":13,"endColumn":25},{"ruleId":"98","severity":1,"message":"115","line":14,"column":8,"nodeType":"100","messageId":"101","endLine":14,"endColumn":16},{"ruleId":"98","severity":1,"message":"116","line":15,"column":8,"nodeType":"100","messageId":"101","endLine":15,"endColumn":18},{"ruleId":"79","severity":1,"message":"117","line":47,"column":8,"nodeType":"81","endLine":47,"endColumn":10,"suggestions":"118"},{"ruleId":"79","severity":1,"message":"119","line":95,"column":8,"nodeType":"81","endLine":95,"endColumn":31,"suggestions":"120"},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'renderLines'. Either include it or remove the dependency array.","ArrayExpression",["121"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'dist', 'dist', 'nextIndex'.","ArrowFunctionExpression","unsafeRefs","react/style-prop-object","Style prop value must be an object","JSXAttribute","no-native-reassign",["122"],"no-negated-in-lhs",["123"],"React Hook useEffect has missing dependencies: 'pickLngLat.end' and 'pickLngLat.start'. Either include them or remove the dependency array.",["124"],["122"],["123"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Grid' is defined but never used.","'Card' is defined but never used.","'Box' is defined but never used.","'Button' is defined but never used.","'TextField' is defined but never used.","'Dialog' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'DialogTitle' is defined but never used.","'IconButton' is defined but never used.","'Typography' is defined but never used.","'ArrowRightAltIcon' is defined but never used.","'EditIcon' is defined but never used.","'DeleteIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'props.movement'. Either include it or remove the dependency array.",["125"],"React Hook useEffect has missing dependencies: 'color', 'inputFields', 'pickLngLat.end', 'pickLngLat.start', and 'props.drawControl'. Either include them or remove the dependency array. You can also do a functional update 'setInputFields(i => ...)' if you only need 'inputFields' in the 'setInputFields' call.",["126"],{"desc":"127","fix":"128"},"no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},"Update the dependencies array to be: [movements, renderLines, snackbarState]",{"range":"135","text":"136"},"Update the dependencies array to be: [pickLngLat.end, pickLngLat.start, props.lastClickLngLat]",{"range":"137","text":"138"},"Update the dependencies array to be: [props.movement]",{"range":"139","text":"140"},"Update the dependencies array to be: [color, inputFields, pickLngLat.end, pickLngLat.start, props.drawControl, props.lastClickLngLat]",{"range":"141","text":"142"},[9950,9976],"[movements, renderLines, snackbarState]",[1796,1819],"[pickLngLat.end, pickLngLat.start, props.lastClickLngLat]",[1381,1383],"[props.movement]",[3027,3050],"[color, inputFields, pickLngLat.end, pickLngLat.start, props.drawControl, props.lastClickLngLat]"]